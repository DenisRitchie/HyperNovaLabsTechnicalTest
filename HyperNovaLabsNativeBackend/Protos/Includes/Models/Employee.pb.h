// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Models/Employee.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Models_2fEmployee_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Models_2fEmployee_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Models_2fEmployee_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Models_2fEmployee_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Models_2fEmployee_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_Models_2fEmployee_2eproto_metadata_getter(int index);
namespace HyperNovaLabs {
namespace Api {
namespace Protos {
namespace Models {
class Employee;
struct EmployeeDefaultTypeInternal;
extern EmployeeDefaultTypeInternal _Employee_default_instance_;
}  // namespace Models
}  // namespace Protos
}  // namespace Api
}  // namespace HyperNovaLabs
PROTOBUF_NAMESPACE_OPEN
template<> ::HyperNovaLabs::Api::Protos::Models::Employee* Arena::CreateMaybeMessage<::HyperNovaLabs::Api::Protos::Models::Employee>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace HyperNovaLabs {
namespace Api {
namespace Protos {
namespace Models {

// ===================================================================

class Employee PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HyperNovaLabs.Api.Protos.Models.Employee) */ {
 public:
  inline Employee() : Employee(nullptr) {}
  virtual ~Employee();
  explicit constexpr Employee(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Employee(const Employee& from);
  Employee(Employee&& from) noexcept
    : Employee() {
    *this = ::std::move(from);
  }

  inline Employee& operator=(const Employee& from) {
    CopyFrom(from);
    return *this;
  }
  inline Employee& operator=(Employee&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Employee& default_instance() {
    return *internal_default_instance();
  }
  static inline const Employee* internal_default_instance() {
    return reinterpret_cast<const Employee*>(
               &_Employee_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Employee& a, Employee& b) {
    a.Swap(&b);
  }
  inline void Swap(Employee* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Employee* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Employee* New() const final {
    return CreateMaybeMessage<Employee>(nullptr);
  }

  Employee* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Employee>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Employee& from);
  void MergeFrom(const Employee& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Employee* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HyperNovaLabs.Api.Protos.Models.Employee";
  }
  protected:
  explicit Employee(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_Models_2fEmployee_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentificationFieldNumber = 1,
    kNameFieldNumber = 2,
    kDepartmentFieldNumber = 3,
    kPositionFieldNumber = 4,
    kSupervisorFieldNumber = 5,
  };
  // string identification = 1;
  void clear_identification();
  const std::string& identification() const;
  void set_identification(const std::string& value);
  void set_identification(std::string&& value);
  void set_identification(const char* value);
  void set_identification(const char* value, size_t size);
  std::string* mutable_identification();
  std::string* release_identification();
  void set_allocated_identification(std::string* identification);
  private:
  const std::string& _internal_identification() const;
  void _internal_set_identification(const std::string& value);
  std::string* _internal_mutable_identification();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string department = 3;
  void clear_department();
  const std::string& department() const;
  void set_department(const std::string& value);
  void set_department(std::string&& value);
  void set_department(const char* value);
  void set_department(const char* value, size_t size);
  std::string* mutable_department();
  std::string* release_department();
  void set_allocated_department(std::string* department);
  private:
  const std::string& _internal_department() const;
  void _internal_set_department(const std::string& value);
  std::string* _internal_mutable_department();
  public:

  // string position = 4;
  void clear_position();
  const std::string& position() const;
  void set_position(const std::string& value);
  void set_position(std::string&& value);
  void set_position(const char* value);
  void set_position(const char* value, size_t size);
  std::string* mutable_position();
  std::string* release_position();
  void set_allocated_position(std::string* position);
  private:
  const std::string& _internal_position() const;
  void _internal_set_position(const std::string& value);
  std::string* _internal_mutable_position();
  public:

  // string supervisor = 5;
  void clear_supervisor();
  const std::string& supervisor() const;
  void set_supervisor(const std::string& value);
  void set_supervisor(std::string&& value);
  void set_supervisor(const char* value);
  void set_supervisor(const char* value, size_t size);
  std::string* mutable_supervisor();
  std::string* release_supervisor();
  void set_allocated_supervisor(std::string* supervisor);
  private:
  const std::string& _internal_supervisor() const;
  void _internal_set_supervisor(const std::string& value);
  std::string* _internal_mutable_supervisor();
  public:

  // @@protoc_insertion_point(class_scope:HyperNovaLabs.Api.Protos.Models.Employee)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identification_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr department_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr position_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr supervisor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Models_2fEmployee_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Employee

// string identification = 1;
inline void Employee::clear_identification() {
  identification_.ClearToEmpty();
}
inline const std::string& Employee::identification() const {
  // @@protoc_insertion_point(field_get:HyperNovaLabs.Api.Protos.Models.Employee.identification)
  return _internal_identification();
}
inline void Employee::set_identification(const std::string& value) {
  _internal_set_identification(value);
  // @@protoc_insertion_point(field_set:HyperNovaLabs.Api.Protos.Models.Employee.identification)
}
inline std::string* Employee::mutable_identification() {
  // @@protoc_insertion_point(field_mutable:HyperNovaLabs.Api.Protos.Models.Employee.identification)
  return _internal_mutable_identification();
}
inline const std::string& Employee::_internal_identification() const {
  return identification_.Get();
}
inline void Employee::_internal_set_identification(const std::string& value) {
  
  identification_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Employee::set_identification(std::string&& value) {
  
  identification_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:HyperNovaLabs.Api.Protos.Models.Employee.identification)
}
inline void Employee::set_identification(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  identification_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:HyperNovaLabs.Api.Protos.Models.Employee.identification)
}
inline void Employee::set_identification(const char* value,
    size_t size) {
  
  identification_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:HyperNovaLabs.Api.Protos.Models.Employee.identification)
}
inline std::string* Employee::_internal_mutable_identification() {
  
  return identification_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Employee::release_identification() {
  // @@protoc_insertion_point(field_release:HyperNovaLabs.Api.Protos.Models.Employee.identification)
  return identification_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Employee::set_allocated_identification(std::string* identification) {
  if (identification != nullptr) {
    
  } else {
    
  }
  identification_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), identification,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:HyperNovaLabs.Api.Protos.Models.Employee.identification)
}

// string name = 2;
inline void Employee::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Employee::name() const {
  // @@protoc_insertion_point(field_get:HyperNovaLabs.Api.Protos.Models.Employee.name)
  return _internal_name();
}
inline void Employee::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:HyperNovaLabs.Api.Protos.Models.Employee.name)
}
inline std::string* Employee::mutable_name() {
  // @@protoc_insertion_point(field_mutable:HyperNovaLabs.Api.Protos.Models.Employee.name)
  return _internal_mutable_name();
}
inline const std::string& Employee::_internal_name() const {
  return name_.Get();
}
inline void Employee::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Employee::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:HyperNovaLabs.Api.Protos.Models.Employee.name)
}
inline void Employee::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:HyperNovaLabs.Api.Protos.Models.Employee.name)
}
inline void Employee::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:HyperNovaLabs.Api.Protos.Models.Employee.name)
}
inline std::string* Employee::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Employee::release_name() {
  // @@protoc_insertion_point(field_release:HyperNovaLabs.Api.Protos.Models.Employee.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Employee::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:HyperNovaLabs.Api.Protos.Models.Employee.name)
}

// string department = 3;
inline void Employee::clear_department() {
  department_.ClearToEmpty();
}
inline const std::string& Employee::department() const {
  // @@protoc_insertion_point(field_get:HyperNovaLabs.Api.Protos.Models.Employee.department)
  return _internal_department();
}
inline void Employee::set_department(const std::string& value) {
  _internal_set_department(value);
  // @@protoc_insertion_point(field_set:HyperNovaLabs.Api.Protos.Models.Employee.department)
}
inline std::string* Employee::mutable_department() {
  // @@protoc_insertion_point(field_mutable:HyperNovaLabs.Api.Protos.Models.Employee.department)
  return _internal_mutable_department();
}
inline const std::string& Employee::_internal_department() const {
  return department_.Get();
}
inline void Employee::_internal_set_department(const std::string& value) {
  
  department_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Employee::set_department(std::string&& value) {
  
  department_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:HyperNovaLabs.Api.Protos.Models.Employee.department)
}
inline void Employee::set_department(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  department_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:HyperNovaLabs.Api.Protos.Models.Employee.department)
}
inline void Employee::set_department(const char* value,
    size_t size) {
  
  department_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:HyperNovaLabs.Api.Protos.Models.Employee.department)
}
inline std::string* Employee::_internal_mutable_department() {
  
  return department_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Employee::release_department() {
  // @@protoc_insertion_point(field_release:HyperNovaLabs.Api.Protos.Models.Employee.department)
  return department_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Employee::set_allocated_department(std::string* department) {
  if (department != nullptr) {
    
  } else {
    
  }
  department_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), department,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:HyperNovaLabs.Api.Protos.Models.Employee.department)
}

// string position = 4;
inline void Employee::clear_position() {
  position_.ClearToEmpty();
}
inline const std::string& Employee::position() const {
  // @@protoc_insertion_point(field_get:HyperNovaLabs.Api.Protos.Models.Employee.position)
  return _internal_position();
}
inline void Employee::set_position(const std::string& value) {
  _internal_set_position(value);
  // @@protoc_insertion_point(field_set:HyperNovaLabs.Api.Protos.Models.Employee.position)
}
inline std::string* Employee::mutable_position() {
  // @@protoc_insertion_point(field_mutable:HyperNovaLabs.Api.Protos.Models.Employee.position)
  return _internal_mutable_position();
}
inline const std::string& Employee::_internal_position() const {
  return position_.Get();
}
inline void Employee::_internal_set_position(const std::string& value) {
  
  position_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Employee::set_position(std::string&& value) {
  
  position_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:HyperNovaLabs.Api.Protos.Models.Employee.position)
}
inline void Employee::set_position(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  position_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:HyperNovaLabs.Api.Protos.Models.Employee.position)
}
inline void Employee::set_position(const char* value,
    size_t size) {
  
  position_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:HyperNovaLabs.Api.Protos.Models.Employee.position)
}
inline std::string* Employee::_internal_mutable_position() {
  
  return position_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Employee::release_position() {
  // @@protoc_insertion_point(field_release:HyperNovaLabs.Api.Protos.Models.Employee.position)
  return position_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Employee::set_allocated_position(std::string* position) {
  if (position != nullptr) {
    
  } else {
    
  }
  position_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), position,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:HyperNovaLabs.Api.Protos.Models.Employee.position)
}

// string supervisor = 5;
inline void Employee::clear_supervisor() {
  supervisor_.ClearToEmpty();
}
inline const std::string& Employee::supervisor() const {
  // @@protoc_insertion_point(field_get:HyperNovaLabs.Api.Protos.Models.Employee.supervisor)
  return _internal_supervisor();
}
inline void Employee::set_supervisor(const std::string& value) {
  _internal_set_supervisor(value);
  // @@protoc_insertion_point(field_set:HyperNovaLabs.Api.Protos.Models.Employee.supervisor)
}
inline std::string* Employee::mutable_supervisor() {
  // @@protoc_insertion_point(field_mutable:HyperNovaLabs.Api.Protos.Models.Employee.supervisor)
  return _internal_mutable_supervisor();
}
inline const std::string& Employee::_internal_supervisor() const {
  return supervisor_.Get();
}
inline void Employee::_internal_set_supervisor(const std::string& value) {
  
  supervisor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Employee::set_supervisor(std::string&& value) {
  
  supervisor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:HyperNovaLabs.Api.Protos.Models.Employee.supervisor)
}
inline void Employee::set_supervisor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  supervisor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:HyperNovaLabs.Api.Protos.Models.Employee.supervisor)
}
inline void Employee::set_supervisor(const char* value,
    size_t size) {
  
  supervisor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:HyperNovaLabs.Api.Protos.Models.Employee.supervisor)
}
inline std::string* Employee::_internal_mutable_supervisor() {
  
  return supervisor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Employee::release_supervisor() {
  // @@protoc_insertion_point(field_release:HyperNovaLabs.Api.Protos.Models.Employee.supervisor)
  return supervisor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Employee::set_allocated_supervisor(std::string* supervisor) {
  if (supervisor != nullptr) {
    
  } else {
    
  }
  supervisor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), supervisor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:HyperNovaLabs.Api.Protos.Models.Employee.supervisor)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Models
}  // namespace Protos
}  // namespace Api
}  // namespace HyperNovaLabs

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Models_2fEmployee_2eproto
