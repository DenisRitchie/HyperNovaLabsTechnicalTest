// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ExpenseReportService.proto

#include "ExpenseReportService.pb.h"
#include "ExpenseReportService.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace HyperNovaLabs {
namespace Api {
namespace Protos {
namespace Services {

static const char* ExpenseReportService_method_names[] = {
  "/HyperNovaLabs.Api.Protos.Services.ExpenseReportService/ListBill",
  "/HyperNovaLabs.Api.Protos.Services.ExpenseReportService/GetBill",
  "/HyperNovaLabs.Api.Protos.Services.ExpenseReportService/CreateBill",
};

std::unique_ptr< ExpenseReportService::Stub> ExpenseReportService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ExpenseReportService::Stub> stub(new ExpenseReportService::Stub(channel, options));
  return stub;
}

ExpenseReportService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_ListBill_(ExpenseReportService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBill_(ExpenseReportService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateBill_(ExpenseReportService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ExpenseReportService::Stub::ListBill(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::HyperNovaLabs::Api::Protos::Services::ListBillResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::HyperNovaLabs::Api::Protos::Services::ListBillResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListBill_, context, request, response);
}

void ExpenseReportService::Stub::async::ListBill(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::HyperNovaLabs::Api::Protos::Services::ListBillResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::HyperNovaLabs::Api::Protos::Services::ListBillResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListBill_, context, request, response, std::move(f));
}

void ExpenseReportService::Stub::async::ListBill(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::HyperNovaLabs::Api::Protos::Services::ListBillResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListBill_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::HyperNovaLabs::Api::Protos::Services::ListBillResponse>* ExpenseReportService::Stub::PrepareAsyncListBillRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::HyperNovaLabs::Api::Protos::Services::ListBillResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListBill_, context, request);
}

::grpc::ClientAsyncResponseReader< ::HyperNovaLabs::Api::Protos::Services::ListBillResponse>* ExpenseReportService::Stub::AsyncListBillRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListBillRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ExpenseReportService::Stub::GetBill(::grpc::ClientContext* context, const ::HyperNovaLabs::Api::Protos::Services::GetBillRequest& request, ::HyperNovaLabs::Api::Protos::Models::Bill* response) {
  return ::grpc::internal::BlockingUnaryCall< ::HyperNovaLabs::Api::Protos::Services::GetBillRequest, ::HyperNovaLabs::Api::Protos::Models::Bill, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetBill_, context, request, response);
}

void ExpenseReportService::Stub::async::GetBill(::grpc::ClientContext* context, const ::HyperNovaLabs::Api::Protos::Services::GetBillRequest* request, ::HyperNovaLabs::Api::Protos::Models::Bill* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::HyperNovaLabs::Api::Protos::Services::GetBillRequest, ::HyperNovaLabs::Api::Protos::Models::Bill, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBill_, context, request, response, std::move(f));
}

void ExpenseReportService::Stub::async::GetBill(::grpc::ClientContext* context, const ::HyperNovaLabs::Api::Protos::Services::GetBillRequest* request, ::HyperNovaLabs::Api::Protos::Models::Bill* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBill_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::HyperNovaLabs::Api::Protos::Models::Bill>* ExpenseReportService::Stub::PrepareAsyncGetBillRaw(::grpc::ClientContext* context, const ::HyperNovaLabs::Api::Protos::Services::GetBillRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::HyperNovaLabs::Api::Protos::Models::Bill, ::HyperNovaLabs::Api::Protos::Services::GetBillRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetBill_, context, request);
}

::grpc::ClientAsyncResponseReader< ::HyperNovaLabs::Api::Protos::Models::Bill>* ExpenseReportService::Stub::AsyncGetBillRaw(::grpc::ClientContext* context, const ::HyperNovaLabs::Api::Protos::Services::GetBillRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetBillRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ExpenseReportService::Stub::CreateBill(::grpc::ClientContext* context, const ::HyperNovaLabs::Api::Protos::Services::CreateBillResquest& request, ::HyperNovaLabs::Api::Protos::Services::CreateBillResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::HyperNovaLabs::Api::Protos::Services::CreateBillResquest, ::HyperNovaLabs::Api::Protos::Services::CreateBillResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateBill_, context, request, response);
}

void ExpenseReportService::Stub::async::CreateBill(::grpc::ClientContext* context, const ::HyperNovaLabs::Api::Protos::Services::CreateBillResquest* request, ::HyperNovaLabs::Api::Protos::Services::CreateBillResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::HyperNovaLabs::Api::Protos::Services::CreateBillResquest, ::HyperNovaLabs::Api::Protos::Services::CreateBillResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateBill_, context, request, response, std::move(f));
}

void ExpenseReportService::Stub::async::CreateBill(::grpc::ClientContext* context, const ::HyperNovaLabs::Api::Protos::Services::CreateBillResquest* request, ::HyperNovaLabs::Api::Protos::Services::CreateBillResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateBill_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::HyperNovaLabs::Api::Protos::Services::CreateBillResponse>* ExpenseReportService::Stub::PrepareAsyncCreateBillRaw(::grpc::ClientContext* context, const ::HyperNovaLabs::Api::Protos::Services::CreateBillResquest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::HyperNovaLabs::Api::Protos::Services::CreateBillResponse, ::HyperNovaLabs::Api::Protos::Services::CreateBillResquest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateBill_, context, request);
}

::grpc::ClientAsyncResponseReader< ::HyperNovaLabs::Api::Protos::Services::CreateBillResponse>* ExpenseReportService::Stub::AsyncCreateBillRaw(::grpc::ClientContext* context, const ::HyperNovaLabs::Api::Protos::Services::CreateBillResquest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateBillRaw(context, request, cq);
  result->StartCall();
  return result;
}

ExpenseReportService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ExpenseReportService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ExpenseReportService::Service, ::google::protobuf::Empty, ::HyperNovaLabs::Api::Protos::Services::ListBillResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ExpenseReportService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::HyperNovaLabs::Api::Protos::Services::ListBillResponse* resp) {
               return service->ListBill(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ExpenseReportService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ExpenseReportService::Service, ::HyperNovaLabs::Api::Protos::Services::GetBillRequest, ::HyperNovaLabs::Api::Protos::Models::Bill, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ExpenseReportService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::HyperNovaLabs::Api::Protos::Services::GetBillRequest* req,
             ::HyperNovaLabs::Api::Protos::Models::Bill* resp) {
               return service->GetBill(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ExpenseReportService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ExpenseReportService::Service, ::HyperNovaLabs::Api::Protos::Services::CreateBillResquest, ::HyperNovaLabs::Api::Protos::Services::CreateBillResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ExpenseReportService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::HyperNovaLabs::Api::Protos::Services::CreateBillResquest* req,
             ::HyperNovaLabs::Api::Protos::Services::CreateBillResponse* resp) {
               return service->CreateBill(ctx, req, resp);
             }, this)));
}

ExpenseReportService::Service::~Service() {
}

::grpc::Status ExpenseReportService::Service::ListBill(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::HyperNovaLabs::Api::Protos::Services::ListBillResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ExpenseReportService::Service::GetBill(::grpc::ServerContext* context, const ::HyperNovaLabs::Api::Protos::Services::GetBillRequest* request, ::HyperNovaLabs::Api::Protos::Models::Bill* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ExpenseReportService::Service::CreateBill(::grpc::ServerContext* context, const ::HyperNovaLabs::Api::Protos::Services::CreateBillResquest* request, ::HyperNovaLabs::Api::Protos::Services::CreateBillResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace HyperNovaLabs
}  // namespace Api
}  // namespace Protos
}  // namespace Services

